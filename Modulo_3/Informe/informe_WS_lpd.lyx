#LyX 2.2 created this file. For more info see http://www.lyx.org/
\lyxformat 508
\begin_document
\begin_header
\save_transient_properties true
\origin unavailable
\textclass extarticle
\use_default_options true
\maintain_unincluded_children false
\language english
\language_package default
\inputencoding auto
\fontencoding global
\font_roman "default" "default"
\font_sans "default" "default"
\font_typewriter "default" "default"
\font_math "auto" "auto"
\font_default_family default
\use_non_tex_fonts false
\font_sc false
\font_osf false
\font_sf_scale 100 100
\font_tt_scale 100 100
\graphics default
\default_output_format default
\output_sync 0
\bibtex_command default
\index_command default
\float_placement H
\paperfontsize default
\spacing single
\use_hyperref false
\papersize default
\use_geometry false
\use_package amsmath 1
\use_package amssymb 1
\use_package cancel 1
\use_package esint 1
\use_package mathdots 1
\use_package mathtools 1
\use_package mhchem 1
\use_package stackrel 1
\use_package stmaryrd 1
\use_package undertilde 1
\cite_engine basic
\cite_engine_type default
\biblio_style plain
\use_bibtopic false
\use_indices false
\paperorientation portrait
\suppress_date false
\justification true
\use_refstyle 1
\index Index
\shortcut idx
\color #008000
\end_index
\secnumdepth 3
\tocdepth 3
\paragraph_separation indent
\paragraph_indentation default
\quotes_language english
\papercolumns 1
\papersides 1
\paperpagestyle default
\tracking_changes false
\output_changes false
\html_math_output 0
\html_css_as_file 0
\html_be_strict false
\end_header

\begin_body

\begin_layout Title
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
includegraphics[width=2cm]{logfacu.png}
\backslash
hspace*{7.10cm}~%    
\end_layout

\begin_layout Plain Layout


\backslash
includegraphics[width=2cm]{logunco.png}
\end_layout

\end_inset


\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash

\backslash
[3cm]
\end_layout

\end_inset

Laboratorio de Programación Distribuída
\begin_inset Newline newline
\end_inset

Departamento de Ingeniría de Computadoras
\end_layout

\begin_layout Author
Pesce Fiorella FAI 213
\begin_inset Newline newline
\end_inset

Moreira Martin FAI 453
\end_layout

\begin_layout Standard
\begin_inset Newpage pagebreak
\end_inset


\end_layout

\begin_layout Standard
\begin_inset CommandInset toc
LatexCommand tableofcontents

\end_inset


\end_layout

\begin_layout Standard
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
bigskip
\end_layout

\end_inset


\end_layout

\begin_layout Standard
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
bigskip
\end_layout

\end_inset


\end_layout

\begin_layout Standard
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
bigskip
\end_layout

\end_inset


\end_layout

\begin_layout Standard
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
bigskip
\end_layout

\end_inset


\end_layout

\begin_layout Standard
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
bigskip
\end_layout

\end_inset


\end_layout

\begin_layout Standard
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
bigskip
\end_layout

\end_inset


\end_layout

\begin_layout Standard
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
bigskip
\end_layout

\end_inset


\end_layout

\begin_layout Standard
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
bigskip
\end_layout

\end_inset


\end_layout

\begin_layout Standard
\begin_inset FloatList figure

\end_inset


\end_layout

\begin_layout Standard
\begin_inset Newpage pagebreak
\end_inset


\end_layout

\begin_layout Part
Laboratorio III
\end_layout

\begin_layout Section
Introducción
\end_layout

\begin_layout Standard
El problema planteado por la cátedra y que se procede a resolver en el presente
 trabajo, corresponde a realizar un programa en el lenguaje Java, que respete
 el esquema de comunicación presentado en la Figura 1.
 La idea central del ejercicio, es que uno o varios Clientes solicitan a
 un Servidor, las predicciones del clima y del horóscopo según la fecha
 y el signo ingresados respectivamente.
 Para el mismo, se especifica que se utilice una aplicación distribuída
 que utilice Web Services.
\end_layout

\begin_layout Standard
El punto clave se encuentra en que se puedan comprender los conceptos básicos
 de la comunicación en sistemas distribuidos, mediante la utilización de
 Web Services.
 Esta tecnología permite le intercambio de datos entre aplicaciones, no
 importa cual sea el lenguaje en el que se han escrito o la plataforma en
 la cual se ejecuten.
 Esto es posible ya que adoptan determinados estándares en su implementación,
 por ejemplo, SOAP (Simple Object Access Protocol), que define como dos
 objetos diferentes pueden comunicarse por medio de intercambio de datos
 XML; dichos datos suelen ser transmitidos por HTTP.
 Por otro lado, WSDL (Web Services Description Language), describe la interfaz
 pública de los Web Services.
 Esta basasdo en XML, y describe la forma de comunicación, es decir, los
 requisitos del protocolo y los formatos de los mensajes necesarios para
 interactuar con los servicios listados en su catálogo.
 
\end_layout

\begin_layout Standard
Por lo tanto, se identifican los siguientes objetivos:
\end_layout

\begin_layout Standard
- Desarrollar el diagrama de comunicación entre Cliente y Servidores
\end_layout

\begin_layout Standard
- Permitir que los Servidores puedan atende varias consultas a la vez
\end_layout

\begin_layout Standard
- Mismas consultas deberían devolver los mismos resultados
\end_layout

\begin_layout Standard
\begin_inset Float figure
wide false
sideways false
status open

\begin_layout Plain Layout
\noindent
\align center
\begin_inset Graphics
	filename esquemagral.png
	lyxscale 10
	scale 50
	clip

\end_inset


\begin_inset Caption Standard

\begin_layout Plain Layout
Esquema dado
\end_layout

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Section
Desarrollo
\end_layout

\begin_layout Standard
El ejercicio que se nos plantea nos obliga a definir varios puntos desde
 el principio; ¿Cuál va a ser el protocolo de comunicación entre Cliente
 y Servidor?, ¿Dónde se van a realizar las validaciones de los datos de
 entrada?, ¿En qué lugar se va a situar la caché? ¿Estará o no replicada?.
 Para aclararlos, presentamos el esquema general de comunicación de nuestra
 aplicación en la Figura 2.
 
\end_layout

\begin_layout Standard
\begin_inset Float figure
wide false
sideways false
status open

\begin_layout Plain Layout
\noindent
\align center
\begin_inset Graphics
	filename Principal.png
	lyxscale 10
	scale 40
	clip

\end_inset


\begin_inset Caption Standard

\begin_layout Plain Layout
Esquema de comunicación
\end_layout

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Standard
En una primera instancia, el Cliente solicita al usuario los datos de entrada.
 Esto debería ser, la fecha y el signo deseados separados por un guión.
 Por ejemplo: '25/10/2017-Tauro'.
 Una vez validada la entrada, el Cliente invoca el método getPronosHoros
 que pertenece a la interfaz PronosHoros y simplemente espera la respuesta.
 Para poder realizar esto, en una primera instancia, se ha definido la interfaz
 PronosHoros, y es la que conoce el cliente y la cual invoca.
 La conoce porque esta ha sido previamente publicada (a través de a clase
 PronosHorosPublisher), es decir, se ha especificado un Web Service públicamente
 de modo que pueda ser accedido por otras aplicaciones.
 Por otro lado, la implementación de los métodos especificados en la interfaz
 se encuentran en la clase PronosHorosImpl.
 Dicha implementación es desconocida por el Cliente, y pertenece al Servidor.
 
\end_layout

\begin_layout Standard
Al principio, solo se había validado que se ingresara un formato de fecha
 correcto, y un signo que existiese.
 En una segunda instancia, se decidió que los datos se pueden ingresar de
 cualquier manera siempre y cuando exista una fecha o un signo, de esta
 manera, se brinda la posibilidad de solicitar solo un servicio.
 Para ver estas posibilidades, se debe escribir el comando 'help'.
\end_layout

\begin_layout Standard
Mientras el Cliente espera, la clase PronosHorosImpl en la implementación
 de su método get tiene que conseguir la respuesta; para esto, lo que hace
 es como primer paso, verificar que en su caché, un hash que nosotros llamamos
 DatosServidor, que no tenga la información que le ha sido solicitada.
 Este hash se crea durante la ejecución de la clase Publisher, de la cual
 está encargado el Servidor.
 Si la consulta ya había sido realizada con anterioridad, y la respuesta
 requerida se encuentra en la caché, el método simplemente retorna estos
 datos.
 En caso contrario, separa la consulta en Fecha y Signo y procede a invocar
 dos métodos, getPronóstico y getHoróscopo, que pertenecen a las clases
 Pronóstico y Horóscopo respectivamente; obviamente, la Fecha es enviado
 al primero y el Signo al segundo como parámetros.
\end_layout

\begin_layout Standard
La forma de operar de estas dos clases es la misma, más allá de que manejan
 información diferente.
 Primero, verifican en su caché - también llamada Datos Servidor - si tienen
 la respuesta a la consulta entrante; si la poseen, la retornan a la clase
 PronosHoros; si no, estan encargados de generar la respuesta, almacenarla
 en la caché y luego retornarla.
 Por supuesto, como la invocación de los métodos de estas clases también
 es a través de Web Services, las interfaces correspondientes previamente
 deben haber sido publicadas (PronosticoPublisher y HoroscopoPublisher);
 cabe aclarar que esta tarea esta a cargo de cada Servidor Pertinente.
\end_layout

\begin_layout Standard
Finalmente, cuando PronosHorosImpl recibe la respuesta al método get, actualiza
 su respectivo Datos Servidor, y luego devuelve la respuesta conjunta al
 Cliente.
\end_layout

\begin_layout Standard
Con esto se ha descrito a grandes rasgos la forma de resolver el problema
 planteado.
 Ahora se procederá a explicar con un poco más de detalle el funcionamiento
 de cada clase.
 Para esto se presentan los siguientes diagramas.
 
\end_layout

\begin_layout Standard
\begin_inset Float figure
wide false
sideways false
status open

\begin_layout Plain Layout
\noindent
\align center
\begin_inset Graphics
	filename Fig3.png
	lyxscale 10
	scale 36
	clip

\end_inset


\begin_inset Caption Standard

\begin_layout Plain Layout
Clase PronosHorosClient
\end_layout

\end_inset


\end_layout

\end_inset

Tanto el Cliente como el ServidorCliente tienen conocimiento de la interfaz
 PronosHoros, la cual define los metodos necesarios para obtener la información.
\end_layout

\begin_layout Standard
El que implementa esa interfaz, en este caso el Servidor, está obligado
 a publicarla mediante un domain especificando un host, puerto y el nombre
 de la interfaz.
 En nuestro caso localhost:port/PornosHoros.
 Además se especifica cual es la clase que implementa dicha interfaz (PronosHoro
sImpl).
\end_layout

\begin_layout Standard
\begin_inset Float figure
wide false
sideways false
status open

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout
\align center
\begin_inset Graphics
	filename Fig3a.png
	lyxscale 10
	scale 50
	clip

\end_inset


\begin_inset Caption Standard

\begin_layout Plain Layout
Clase PronosHorosImpl 
\end_layout

\end_inset


\end_layout

\begin_layout Plain Layout

\end_layout

\end_inset


\end_layout

\begin_layout Standard
\begin_inset Float figure
wide false
sideways false
status open

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout
\align center
\begin_inset Graphics
	filename Fig3b.png
	lyxscale 10
	scale 50
	clip

\end_inset


\begin_inset Caption Standard

\begin_layout Plain Layout
Clase PronosHorosImpl - getPronostico
\end_layout

\end_inset


\end_layout

\begin_layout Plain Layout

\end_layout

\end_inset


\end_layout

\begin_layout Standard
\begin_inset Float figure
wide false
sideways false
status open

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout
\align center
\begin_inset Graphics
	filename Fig3c.png
	lyxscale 10
	scale 50
	clip

\end_inset


\begin_inset Caption Standard

\begin_layout Plain Layout
Clase PronosHorosImpl - getHoroscopo
\end_layout

\end_inset


\end_layout

\begin_layout Plain Layout

\end_layout

\end_inset


\end_layout

\begin_layout Standard
Cuando el Cliente realiza una consulta, se verifica mediante expresiones
 regulares que los datos ingresados sean correctos, para luego solicitar
 el servicio.
 En el caso de que el par de datos este mal ingresado, se notifica y se
 piden los datos nuevamente.
 Sin embargo si al menos un dato se encuentra ingresado de forma correcta,
 el Cliente procede a hacer la consulta que corresponde a ese dato solamente.
\end_layout

\begin_layout Standard
Tomando por sentado que los datos se ingresaron correctamente, se invoca
 el servicio deseado a través del método getPronosHoros, el cual necesita
 fecha y signo como parámetros, luego este se ejecuta en el servidor, realizando
 la verificación de la caché como se explicó anteriormente.
\end_layout

\begin_layout Standard
\begin_inset Float figure
wide false
sideways false
status open

\begin_layout Plain Layout
\noindent
\align center
\begin_inset Graphics
	filename Fig4.png
	lyxscale 10
	scale 36
	clip

\end_inset


\begin_inset Caption Standard

\begin_layout Plain Layout
Clase HoroscopoImp
\end_layout

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Standard
Las conexiones de ServidorCliente con ServidorHoroscopo y ServidorPronostico
 son muy similares a la anterior explicada.
 Los dos servidores - horoscopo y pronostico - deben publicar cual es la
 interfaz que ofrecen y qué clase corresponde a la implementación de los
 métodos especificados en dicha interfaz, para que así cualquier Cliente
 pueda invocar esos Web Services según sus necesidades.
 
\end_layout

\begin_layout Standard
ServidorCliente valida las entradas, para luego verificar su caché.
 Si necesita nueva información, hace uso de los Web Services mencionados,
 realizando getPronostico enviando la fecha o getHoroscopo enviando el signo.
 En la implementación de esos métodos (muy similares) se debe buscar en
 caché y si no se encuentra generar una salida.
 Esta salida se almacena en el caché y se retorna al servidorCliente, el
 cual a su vez, guarda esa respuesta en caché y la retorna al cliente.
\end_layout

\begin_layout Standard
\begin_inset Float figure
wide false
sideways false
status open

\begin_layout Plain Layout
\noindent
\align center
\begin_inset Graphics
	filename Fig5.png
	lyxscale 10
	scale 36
	clip

\end_inset


\begin_inset Caption Standard

\begin_layout Plain Layout
Clase PronosticoImpl
\end_layout

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Standard
Como se menciono anteriormente las validaciones se realizan mediante expresiones
 regulares a fin de reducir al mínimo los errores.
 Básicamente, en el ingreso de datos de cada servidor, se busca la entrada
 pertinente (fecha y/o signo) y se descarta el resto.
 Si no se encuentra ningún dato válido, asumimos que la entrada es errónea
 y devuelve un mensaje de error.
\end_layout

\begin_layout Section
Instrucciones de uso
\end_layout

\begin_layout Standard
A continuación se detallan los pasos a seguir para poner en funcionamiento
 tantos los distintos servidores como el cliente, y poder realizar las pruebas
 que correspondan.
\end_layout

\begin_layout Enumerate
Deben abrirse cuatro terminales, una debe estar situada en la carpeta Cliente
 y el resto en cada uno de los servidores (Servidor, ServidorPronóstico
 y ServidorHoróscopo)
\end_layout

\begin_layout Enumerate
En cada terminal que corresponda a un servidor, se genera el wsdl.
 La forma de hacer esto es: 
\begin_inset Quotes eld
\end_inset

wsgen -keep -cp .
 nombrePackage.nombreClaseImpl
\begin_inset Quotes erd
\end_inset

.
 En nuestro caso por ejemplo: 
\begin_inset Quotes eld
\end_inset

wsgen -keep -cp .
 paq.PronosHorosImpl
\begin_inset Quotes erd
\end_inset


\end_layout

\begin_layout Enumerate
En las terminales de ServidorCliente, ServidorHoroscopo y ServidorPronostico
 se realiza la publicación del Web Service de la siguiente manera: 
\begin_inset Quotes eld
\end_inset

java nombrePackage.clasePublisher
\begin_inset Quotes erd
\end_inset

.
 En nuestro caso por ejemplo: 
\begin_inset Quotes eld
\end_inset

java paq.PronosHorosPublisher
\begin_inset Quotes erd
\end_inset


\end_layout

\begin_layout Enumerate
En el caso del ServidorCliente, debemos seguir la etapa de configuracion
 en donde ingresamos host y port de los servidores de Horoscopo y Pronostico.
\end_layout

\begin_layout Enumerate
Se ejecuta el Cliente siguiendo la etapa de configuracion en donde tenemos
 que brindarle el host donde vamos a realizar las consultas (ServidorCliente),
 asi como el puerto, para luego estar en condiciones de iniciar el uso del
 sistema 
\end_layout

\begin_layout Enumerate
Se ingresa la fecha y el signo deseados para la consulta con el siguiente
 formato: 'DD/MM/AAAA-Signo' en la terminal del Cliente
\end_layout

\begin_layout Enumerate
Se obtiene la respuesta pertinente
\end_layout

\begin_layout Section
Limitaciones, conclusión y trabajos futuros
\end_layout

\begin_layout Standard
Luego de haber implementado la solución del problema planteado, se concluye
 en que la utilización de Web Services ha sido muy fácil de implementar.
 Como programadores, estamos desligados de realizar conexiones a bajo nivel;
 solo estamos encargados de especificar la interfaz de un servicio y publicarlo;
 simplemente así se consigue que este servicio pueda ser consumido por algún
 Cliente.
 Así, un Cliente que solicita servicios puede invocar dichos métodos sin
 saber particularmente si estos son locales o remotos, o como estan implementado
s.
 Además, las especificaciones de los Web Services permiten que un Cliente
 que necesita cumplir un requerimiento, pueda buscar entre los servicios
 publicados, cual cumple mejor sus necesidades, y así, 
\begin_inset Quotes eld
\end_inset

solicitar
\begin_inset Quotes erd
\end_inset

 la interfaz y la forma de consumirlo.
 Por lo tanto creemos que la utilización es más provechosa en comparación
 con anteriores implementaciones.
 Otra ventaja importante es que nos hemos vistos desligados de creación
 de threads para el manejo de consultas en paralelo.
\end_layout

\begin_layout Standard
Más allá de que el trabajo de desarrollo fue más simplificado, hay problemas
 que siguen existiendo no importa cual sea la implementación, tales como
 el uso del caché y su posición, la validación de la entrada de datos, la
 ayuda para el uso del sistema.
 Además, cabe añadir que el Cliente tiene que conocer la Interfaz que va
 a invocar, la nomenclatura de los métodos, los argumentos solicitados,
 tipos de datos de los mismos; esto puede verse como una limitación.
 Si bien cuando se publica un Servicio se especifican todos esos aspectos,
 el Cliente tiene que ser capaz de identificar cuáles son los Servicios
 que le convienen consumir.
 A veces, según los requerimientos, estos Servicios podrían no ser exactamente
 los que uno necesita, y en ese caso habrá que ver, en qué medida me sirve,
 si se deberá consumir más de un servicio o no, como integrar ese o esos
 servicios a la propia implementación.
 Hay ramas de investigación en este área que se dedican a determinar, por
 ejemplo, dado un requerimiento y analizandolo, cuáles son los servicios
 disponibles que más se asemejan al solicitado y como adaptar la interfaz
 para que sea compatible con lo buscado.
 
\end_layout

\begin_layout Standard
En nuestro caso además, logramos plantear algunas validaciones de entradas
 más que hacen posible que el sistema siga funcionando no importa cual sea
 la cadena ingresada, es decir, en caso de que el usuario no respete el
 formato antes nombrado.
 
\end_layout

\begin_layout Standard
Como trabajos futuros, es posible mencionar que puede optimizarse el uso
 de la caché.
 Si bien actualmente se manejan tres cachés, cada una en un Servidor, podría
 modificarse la estructura general que hemos planteado para que la caché
 se encuentre sólo en el Servidor PronosHoros; de ser así, esta debería
 permitir la consulta de resultados previamente almacenados tanto de Fecha
 como de Signo por separado - y no ligados como actualmente se realiza -.
 Debería estudiarse si la mejor manera de hacer esto es con una sola caché
 o con dos para distinguir los diferentes tipos de elementos en ella almacenada.
 
\end_layout

\begin_layout Section
Bibliografía
\end_layout

\begin_layout Standard
- Distributed Systems, Principles and Paradigms (2da edition) - Tanenbaum,
 Van Steen.
 
\end_layout

\begin_layout Standard
- Generador de expresiones regulares: https://regex101.com/
\end_layout

\begin_layout Standard
- http://www.w3c.es/Divulgacion/GuiasBreves/ServiciosWeb
\end_layout

\end_body
\end_document
